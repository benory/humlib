#!/usr/bin/perl
#
# Programmer:    Craig Stuart Sapp <craig.stanford.edu>
# Creation Date: Mon Aug 10 00:06:00 PDT 2015
# Last Modified: Sat Apr 15 12:02:53 PDT 2023
# Filename:      /bin/makehumlib
# Syntax:        perl 5
# vim:           ts=3
#
# Description:   Merge all library files into humlib.h and humlib.cpp.
#

use strict;
use Getopt::Long;

my $TargetDirectory;

Getopt::Long::Configure("bundling");
GetOptions (
   'd|directory=s' => \$TargetDirectory
);

$TargetDirectory = "min" if !$TargetDirectory;

die "Cannot find directory $TargetDirectory" if !-d $TargetDirectory;

my $license = getLicense("LICENSE.txt");

my $SrcDir = "src";
my $IncDir = "include";
my $MinDir = "min";

createIncludeFile($IncDir, $TargetDirectory, "humlib.h");
createSourceFile($SrcDir, $TargetDirectory, "humlib.cpp");


# Copy XML parsing library:

link("$IncDir//pugixml.hpp", "$TargetDirectory/pugixml.hpp");
link("$IncDir//pugiconfig.hpp", "$TargetDirectory/pugiconfig.hpp");

# humlib.h is included in most tools and CLI programs, so copy updated file
# to include directory:
link("$MinDir//humlib.h", "$IncDir/humlib.h");

exit(0);


###########################################################################

##############################
##
## createIncludeFile -- Collate *.h files in include directory.
##

sub createIncludeFile {
	my ($sourceDir, $targetDir, $targetName) = @_;
	open (IFILE, ">$targetDir/$targetName") or die;

	my $contents = "";
	my @files = (
		"HumHash.h",
		"HumNum.h",
		"HumPitch.h",
		"HumTransposer.h",
		"HumRegex.h",
		"HumSignifier.h",
		"HumSignifiers.h",
		"HumAddress.h",
		"HumParamSet.h",
		"HumInstrument.h",
		"HumdrumLine.h",
		"HumdrumToken.h",
		"HumdrumFileBase.h",
		"HumdrumFileStructure.h",
		"HumdrumFileContent.h",
		"HumdrumFile.h",
		"MuseRecordBasic.h",
		"MuseRecord.h",
		"MuseData.h",
		"MuseDataSet.h",
		"NoteCell.h",
		"NoteGrid.h",
		"Convert.h",
		"PixelColor.h",
		"GotScore.h"
	);

	# musicxml2hum converter related files:
	my @files2 = (
		"GridMeasure.h",
		"GridSlice.h",
		"GridVoice.h",
		"HumGrid.h",
		"MxmlEvent.h",
		"MxmlMeasure.h"
	);

	my $file;
	foreach $file (@files) {
		my $lines = getMergeContents("$sourceDir/$file");
		if ($lines =~ /^\s*$/) {
			# print "$sourceDir/$file is not formatted correctly.\n";
		}
		$contents .= $lines;
	}

	$contents .= getMergeContents("$sourceDir/GridCommon.h");
	$contents .= getMergeContents("$sourceDir/MxmlPart.h");
	$contents .= getMergeContents("$sourceDir/GridSide.h");
	$contents .= getMergeContents("$sourceDir/GridStaff.h");
	$contents .= getMergeContents("$sourceDir/GridPart.h");

	foreach $file (@files2) {
		my $lines = getMergeContents("$sourceDir/$file");
		if ($lines =~ /^\s*$/) {
			print "$sourceDir/$file is not formatted correctly.\n";
		}
		$contents .= $lines;
	}

	my $options = getMergeContents("$sourceDir/Options.h");
	$contents .= $options;

	# HumTool depends on Options class:
	$contents .= getMergeContents("$sourceDir/HumTool.h");

	# HumdrumFileStream depends on Options class:
	$contents .= getMergeContents("$sourceDir/HumdrumFileStream.h");

	# HumdrumFileSet depends on Options and HumdrumFileStream classes:
	$contents .= getMergeContents("$sourceDir/HumdrumFileSet.h");

	my @tools = sort glob "$sourceDir/tool-*.h";

	foreach my $tool (@tools) {
		$tool =~ s/^$sourceDir\///;
		$contents .= getMergeContents("$sourceDir/$tool");
	}

	my $date = `date`;
	chomp $date;

   print IFILE <<"EOT";
//
// Programmer:    Craig Stuart Sapp <craig\@ccrma.stanford.edu>
// Creation Date: Sat Aug  8 12:24:49 PDT 2015
// Last Modified: $date
// Filename:      min/humlib.h
// URL:           https://github.com/craigsapp/humlib/blob/master/min/humlib.h
// Syntax:        C++11
// vim:           ts=3
//
// Description:   Include file for humlib library.
//
/*
$license
*/

#ifndef _HUMLIB_H_INCLUDED
#define _HUMLIB_H_INCLUDED

#include <algorithm>
#include <cctype>
#include <chrono>
#include <cmath>
#include <cstdarg>
#include <cstring>
#include <cstring>
#include <ctime>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <locale>
#include <map>
#include <numeric>
#include <random>
#include <regex>
#include <set>
#include <sstream>
#include <string>
#include <utility>
#include <vector>

#ifndef M_PI
    #define M_PI 3.14159265358979323846
#endif

using std::cerr;
using std::cin;
using std::cout;
using std::endl;
using std::ends;
using std::ifstream;
using std::invalid_argument;
using std::istream;
using std::istreambuf_iterator;
using std::list;
using std::map;
using std::ostream;
using std::pair;
using std::regex;
using std::set;
using std::string;
using std::stringstream;
using std::to_string;
using std::vector;

#ifdef USING_URI
	#include <sys/types.h>   /* socket, connect */
	#include <sys/socket.h>  /* socket, connect */
	#include <netinet/in.h>  /* htons           */
	#include <netdb.h>       /* gethostbyname   */
	#include <unistd.h>      /* read, write     */
	#include <string.h>      /* memcpy          */
   #include <sstream>
#endif

#include "pugiconfig.hpp"
#include "pugixml.hpp"

using pugi::xml_attribute;
using pugi::xml_document;
using pugi::xml_node;
using pugi::xpath_node;

namespace hum {

class Convert;
class HumNum;
class HumAddress;
class HumdrumToken;
typedef HumdrumToken* HTp;
class HumdrumLine;
typedef HumdrumLine* HLp;
class HumdrumFileBase;
class HumdrumFileStructure;
class HumdrumFileContent;
class HumdrumFile;
class MuseRecordBase;
class MuseRecord;
class MuseData;
class MuseDataSet;
class GridVoice;
class GotScore;

EOT

	print IFILE <<"EOT";
$contents
} // end of namespace hum


#endif /* _HUMLIB_H_INCLUDED */



EOT

	close IFILE;
}



##############################
##
## createSourceFile -- Collate *.cpp files in src directory.
##

sub createSourceFile {
	my ($sourceDir, $targetDir, $targetName) = @_;
	open (SFILE, ">$targetDir/$targetName") or die;

	my $date = `date`;
	chomp $date;

   print SFILE <<"EOT";
//
// Programmer:    Craig Stuart Sapp <craig\@ccrma.stanford.edu>
// Creation Date: Sat Aug  8 12:24:49 PDT 2015
// Last Modified: $date
// Filename:      min/humlib.cpp
// URL:           https://github.com/craigsapp/humlib/blob/master/min/humlib.cpp
// Syntax:        C++11
// vim:           ts=3
//
// Description:   Source file for humlib library.
//
/*
$license
*/

#include "humlib.h"

namespace hum {

EOT

	my @files = getFiles($sourceDir);
	foreach my $file (@files) {
		next if $file =~ /^humlib.cpp$/;
		my $lines = getMergeContents("$sourceDir/$file");
		if ($lines =~ /^\s*$/) {
			# print "$sourceDir/$file is not correctly formatted\n";
		}
		print SFILE getMergeContents("$sourceDir/$file");
	}

print SFILE "\n} // end namespace hum\n";

	close SFILE;
}



##############################
##
## getMergeContents -- return the contents of a file between lines containing
## "START_MERGE" and "END_MERGE".
##

sub getMergeContents {
	my ($file) = @_;
	open (MFILE, "$file") || die "Cannot read $file\n";
	my @contents = <MFILE>;
	close MFILE;
	my $output = "";
	my $active = 0;
	foreach my $line (@contents) {
		if ($active == 0) {
			if ($line =~ /START_MERGE/) {
				$active = 1;
				next;
			}
		}
		if ($active && ($line =~ /END_MERGE/)) {
			$active = 0;
			next;
		}
		next if $active == 0;
		$output .= $line;
	}
	return $output;
}



##############################
##
## getFiles -- Get a list of a files in a directory.  Only allowing .cpp, .h, and .hpp files.
## 

sub getFiles {
	my ($dir) = @_;
	opendir(DIR, $dir) or die;
	my @output;
	my @output2;
	while (my $file = readdir(DIR)) {
		next if $file =~ /^\./;
		next if $file !~ /\.(h|hpp|cpp)$/;
		next if -d "$dir/$file";
		next if !-r "$dir/$file";
		if ($file =~ /Convert/) {
			# classes which have a dependeny on other classes:
			$output2[@output2] = $file;
		} else {
			$output[@output] = $file;
		}
	}
	@output = sort @output;
	push(@output, @output2);
	return sort @output;
}



##############################
##
## getLicense -- 
## 

sub getLicense {
	my ($file) = @_;
	open (FILE, $file) or die "Cannot open $file\n";
	my @contents = <FILE>;
	close FILE;
	return join("", @contents);
}



